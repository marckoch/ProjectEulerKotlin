import util.checkIfPrime
import util.combinations
import util.primes

// https://projecteuler.net/problem=51
fun main() {
    val size = 8    // set to 6 or 7 to get examples from the problem description
    primes()
        .first { isStartOfPrimeFamily(it, size) }
        .let { println(it) }
}

fun isStartOfPrimeFamily(p: Long, size: Int): Boolean {
    val digitCount = p.toString().length
    val indices = IntArray(digitCount) { it }

    for (repl in 1 until digitCount) {      // `repl` == number of digits we try to replace

        val primeNumberFamily =
            combinations(indices, repl)         // build all combinations of indices we need to replace
                .map { combination ->
                    buildNumberFamily(p, combination)
                        .filter { checkIfPrime(it) }
                }
                .filter { it.size == size }
                .flatten()
                .toList()

        if (primeNumberFamily.size == size && primeNumberFamily.contains(p)) {
            println("$p -> $primeNumberFamily")
            return true
        }
    }
    return false
}

// create a list of all numbers that are generated by replacing the digits at `indices`
// in the given number `input` with the numbers 0..9
//
// e.g. buildNumberFamily(1234, (1,3)) -> 1030, 1131, 1231, 1323, 1424, ... , 1929
//      in the number 1234 the digits at 1 and 3 are replaced with 0, 1, 2, ..., 9
fun buildNumberFamily(input: Long, indices: List<Int>): List<Long> {
    return (0..9)
        .map { i -> createNewNumber(input, indices, i) }
        .filter { it.toString().length == input.toString().length } // to avoid `0` in first digit
        .toList()
}

// create a new number by taking `input` and put `replacement` at each one of the `indices`
// e.g. createNewNumber(12345678, (2,4,6), 1) = 12141618
// TODO: there must be a better way to do this...
fun createNewNumber(input: Long, indices: List<Int>, replacement: Int): Long {
    return input.toString()
        .toCharArray()
        .withIndex()
        .map {
            if (it.index in indices) replacement else it.value
        }
        .joinToString("")
        .toLong()
}